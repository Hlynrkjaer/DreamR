| Find the title of each film | Find the director of each film | Find the title and director of each film | Find the title and year of each film |
|=============================|================================|==========================================|======================================|
| SELECT title FROM movies;   | SELECT director FROM movies;   | SELECT title, director FROM movies;	  | SELECT title, year FROM movies;      |
\------------------------------------------------------------------------------------------------------------------------------------------------/
							============================
				      Find all tables:   |   SELECT * FROM movies;  |
							============================



| Find the movie with a row id of 6  | Find the movies realeased in the years between 2000 and 2003 |
|====================================|=============================================================|
| SELECT * FROM movies WHERE id=6;   | SELECT * FROM movies WHERE year BETWEEN 2000 AND 2003       |
\--------------------------------------------------------------------------------------------------/


| Find the movies not released in the years between 2000 and 2003 | Find the first 5 Pixar movies and their release year      |
|=================================================================|===========================================================|
| SELECT * FROM movies WHERE year NOT BETWEEN 2000 AND 2010	  | SELECT title, year FROM movies WHERE id IN (1, 2, 3, 4, 5)|
\-----------------------------------------------------------------------------------------------------------------------------/


..=======================================================================================================================================[]
|| = Case sensitive exact string comparison (notice the single equals) col_name = "ulf" 						 _|
|| != or <> Case sensitive exact string inequality comparison col_name != "ulfR" 						       _|
|| LIKE Case insensitive exact string comparison col_name LIKE "ULFR" 							   	     _|
|| NOT LIKE Case insensitive exact string inequality comparison col_name NOT LIKE "ULFR" 				 	   _|
|| % Used anywhere in a string to match a sequence of zero or more characters (only with LIKE or NOT LIKE) col_name LIKE "%**%") _|
|| _ Used anywhere in a string to match a single character (only with LIKE or NOT LIKE) col_name LIKE "**_"		       _|
|| IN (...) String exists in a list col_name IN ("*", "*", "*") 							     _|
|| NOT IN (...) String does not exist in a list col_name NOT IN ("*", "*", "*") 				  	    |
..==========================================================================================================================

-------------------------------------------------------------------------------------------------------------------------------------------------
^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^
-------------------------------------------------------------------------------------------------------------------------------------------------
SELECT DISTINCT director FROM movies ORDER BY director ASC;  (List all directors of Pixar movies (by words), without duplicates)

SELECT * FROM movies ORDER BY year DESC LIMIT 4;             (List the last four Pixar movies released (ordered from most recent to least))
SELECT * FROM movies ORDER BY title ASC LIMIT 5;             (List the first five Pixar movies sorted by words)
SELECT * FROM movies ORDER BY title ASC LIMIT 5 OFFSET 5;    (List the next five Pixar movies sorted by words)
-------------------------------------------------------------------------------------------------------------------------------------------------
^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^/\^\/^
-------------------------------------------------------------------------------------------------------------------------------------------------

	||================================================================================||
	||================================================================================||
	|| SELECT query									  ||
	|| 	SELECT column, another_column, ...					  ||
	||		FROM mytable							  ||
	||			WHERE condition(s)					  ||
	||				ORDER BY column ASC/DESC			  ||
	||					LIMIT num_limit OFFSET num_offset;	  ||
	||================================================================================||
	||================================================================================||


SELECT city, population FROM north_american_cities WHERE country="Canada";
SELECT city, population FROM north_american_cities
 WHERE country="United States" ORDER BY population DESC LIMIT 2 OFFSET 2;
SELECT title, domestic_res, all_res FROM movies INNER JOIN boxoffice ON id = movie_id;
SELECT title, domestic_res, all_res FROM movies INNER JOIN boxoffice ON id = movie_id WHERE all_res > domestic_res;
SELECT * FROM movies INNER JOIN boxoffice ON id=movie_id ORDER BY rating DESC

	______________________________________________________________________________________________
       |______________________________________________________________________________________________|
       \__|											   |__/
	|||	    SELECT column, another_column, ...				 	   	   |||
	|||		 FROM mytable							   	   |||
	|||		    INNER/LEFT/RIGHT/FULL JOIN another_table 		   		   |||
	|||			    ON mytable.id = another_table.matching_id			   |||
	|||				WHERE condition(s)				   	   |||
	|||					ORDER BY column, ... ASC/DESC		   	   |||
	|||						LIMIT num_limit OFFSET num_offset; 	   |||
	|__\______________________________________________________________________________________/__|
        \____________________________________________________________________________________________/

SELECT DISTINCT building FROM employees LEFT JOIN buildings;
SELECT DISTINCT building FROM employees LEFT JOIN buildings ON building_name=building;
SELECT DISTINCT building_name, capacity FROM buildings;
SELECT DISTINCT role, building_name FROM buildings LEFT JOIN employees ON building_name=building;

		 ___________________________________________
		|""\=====================================/""|
		|""/=====================================\""|
		|""\   SELECT column, another_column,... /""|
		|""/	FROM mytable			 \""|
		|""\	 WHERE column IS/IS NOT NULL	 /""|
		|""/	  AND/OR another_condition	 \""|
		|""\		AND/OR 			 /""|
		|""/=====================================\""|
		|""\=====================================/""|
		[___________________________________________]

SELECT DISTINCT name, role FROM employees LEFT JOIN buildings where building IS NULL;
SELECT DISTINCT building_name FROM buildings LEFT JOIN employees ON building_name=building WHERE role IS NULL; 

		 __________________________________________________
		/\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\/\\/\
	       ()-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=()
		\    SELECT full_speed * 2.0 AS double_full_speed  /
		/     FROM string_data				   \
		\      WHERE ABS(full_position) * 10.0 > 500;	   /
		/__________________________________________________\
		[==================================================]

	  ________________________________________________
 	/)						  (\
	//						   \\
	\\   SELECT column AS better_column_name, ...	   //
	//    FROM a_long_widgets_table_name AS mywidgets  \\
	\\     INNER JOIN widget_results	           //
	//     ON mywidgets.id = widget_result.widget_id;  \\
	\\						   //
 	 '-------------------------------------------------'

SELECT title, (domestic_res + international_res) / 1000000 AS millions 
FROM movies
 JOIN boxoffice
 ON movies.id = boxoffice.movie_id;
SELECT title, year
 FROM movies
 WHERE rate * 2 > 5;

   />------------------------------------------------------------------------------------------------------------------------<\
 (][)   COUNT(*), COUNT(column) 											     (][)
(]||[)	common function used to counts the number of rows in the group if no column name is specified. 			    (]||[)
(]||[)  		Otherwise, count the number of rows in the group with non-NULL values in the specified column.      (]||[)
 (][)															     (][)
 (][)   MIN(column) Finds the smallest numerical value in the specified column for all rows in the group. 		     (][)
 (][)   MAX(column) Finds the largest numerical value in the specified column for all rows in the group. 		     (][)
 (][)   AVG(column) Finds the average numerical value in the specified column for all rows in the group. 		     (][)
 (][)   SUM(column) Finds the sum of all numerical values in the specified column for the rows in the group. 		     (][)
   \>------------------------------------------------------------------------------------------------------------------------</


SELECT AGG_FUNC(column_or_expression) AS aggregate_description, ... FROM table WHERE string GROUP BY column;
SELECT MAX(years_employed) FROM employees;
SELECT role, AVG(years_employed) as average_result 
FROM employees 
GROUP BY role;
SELECT building, SUM(years_employed) AS total_num FROM employees GROUP BY building;
SELECT role, COUNT(*) as Number_of_artists 
FROM employees
 WHERE role = "Artist";
Select COUNT(role) AS result_num From employees WHERE role="Artist";
Select role, COUNT(name) AS result_num From employees Group BY role;
Select role, SUM(years_employed) From employees WHERE role="Engineer";
SELECT role, SUM(years_employed) FROM employees GROUP By role HAVING role="Engineer";
			    ______________________________________________________________
		   	   (/								//)
		  	  //							       // |
		 	 //							      //  |
			((===========================================================((	  |
			||===========================================================||   |
			||===========================================================||   |
			||							     ||   |
			|| SELECT DISTINCT column, AGG_FUNC(column_or_expr), ...     ||   |
			|| FROM mytable						     ||	  |
			||    JOIN another_table			             ||   |
			||      ON mytable.column = another_table.column   	     ||   |
			||    WHERE constraint_expression			     ||   |
			||    GROUP BY column					     ||   |
			||    HAVING constraint_expression			     ||   |
			||    ORDER BY column ASC/DESC				     ||   ;
			||    LIMIT count OFFSET COUNT;				     ||  / 
			||===========================================================|| /  
			||===========================================================||/
			'*===========================================================''

SELECT director, COUNT(title) FROM movies GROUP BY director;
SELECT director, SUM(domestic_res+international_res) AS total_result FROM movies JOIN boxoffice ON id=movie_id GROUP BY director;
SELECT director, SUM(domestic_res+international_res) AS total_result FROM movies INNER JOIN boxoffice ON id=movie_id GROUP BY director;



 ________________________________________________________________________________________________________________________________________________
|\][{}][/\][{}][/\][{}][/\][{}][/\][{}][/\][{}][/\][{}][/\][{}][/\][{}][/\][{}][/\][{}][/\][{}][/\][{}][/\][{}][/\][{}][/\][{}][/\][{}][/\][{}][/|
|''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''|
'\______________________________________________________________________________________________________________________________________________/'
||================||=================||=================||=================||=================||=================||=================||===========||
\-----------------/\-----------------/\-----------------/\-----------------/\-----------------/\-----------------/\-----------------/\-----------/\
||================||===== ===========||======== ========||=================||=================||=================||=================||===========||
\-----------------\/-----------------\/-----------------\/-----------------\/-----------------\/-----------------\/-----------------\/-----------\/
||================||=================||=================||=================||=================||=================||=================||===========||
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

for all columns:	INSERT INTO mytable VALUES (value_or_expr, another_value_or_expr, ...), (value_or_expr_2, another_value_or_expr_2, ...), ...;
for some columns:       INSERT INTO mytable (column, else_col, ...) VALUES (value, else_val_or_expr, ...), (value_2, else_val_or_expr_2, ...), ...;

INSERT INTO movies (title, director, year, length_minutes) VALUES ("Toy Story 4", "Torald Asgeirsson", 2003, 28); 
INSERT INTO boxoffice (movie_id, rating, domestic_res, international_res) VALUES (16, 8.7, 340000000, 270000000); 


			UPDATE mytable SET column = value_or_expr, other_column = another_value_or_expr, ... WHERE condition;

UPDATE movies SET director="Torvald Asgeirsson" WHERE title="Little Bersrkr"; BUT PROPERLY TO USE "id=*";
UPDATE movies SET year = 1999 WHERE title="Toy Story 2";   BUT PROPERLY TO USE "id=*";
UPDATE movies SET title = "Toy Story 3", director = "Sigbjorn Arnleifsson" WHERE title="Toy Story 8";
UPDATE movies 
SET title = "Toy Story 3", director = "Fylkir Hlynursson" 
WHERE id = 11;

		        DELETE FROM mytable WHERE condition;

DELETE FROM movies WHERE year < 2005;
DELETE FROM movies WHERE director="Asgeir Torvaldsson";

	
----------	        CREATE TABLE IF NOT EXISTS mytable (column DataType TableConst DEFAULT value, _column DataType TableConst DEFAULT value,...);
Data Type:
----------
 ^ ^ ^ ^ 
 | | | |

-> INTEGER, BOOLEAN 
	The integer datatypes can store whole integer values like the count of a number or an age. 
		In some implementations, the boolean value is just represented as an integer value of just 0 or 1. 

-> FLOAT, DOUBLE, REAL 
	The floating point datatypes can store more precise numerical data like measurements or fractional values. 
		Different types can be used depending on the floating point precision required for that value. 

-> CHARACTER(num_chars), VARCHAR(num_chars), TEXT 
		The text based datatypes can store strings and text in all sorts of locales. 
			The distinction between the various types: amount to underlaying efficiency of the database when working with these columns.

		Both the CHARACTER and VARCHAR (variable character) types are specified with the max number of characters that they can store 
			(longer values may be truncated), so can be more efficient to store and query with big tables.
 
-> DATE, DATETIME SQL 
		can also store date and time stamps to keep track of time series and event data. 
			They can be tricky to work with especially when manipulating data across timezones. 

-> BLOB Finally, SQL 
		can store binary data in blobs right in the database. 
			These values are often visible to the database, so you usually have to store them with the right metadata to requery them. 

------------	       
Table Const:
------------
 ^ ^ ^ ^ ^ ^
 | | | | | |

-> PRIMARY KEY 
	This means that the values in this column are unique, and each value can be used to identify a single row in this table. 

-> AUTOINCREMENT 
	For integer values, this means that the value is automatically filled in and incremented with each row insertion. 
		Not supported in all databases. 

-> UNIQUE 
	This means values in this column have to be unique, can't insert another row with the same value in this column as another row in the table. 
		Differs from the `PRIMARY KEY` in that it doesn't have to be a key for a row in the table. 

-> NOT NULL 
	This means that the inserted value can not be `NULL`. 

-> CHECK (expression) 
	This is allows you to run a more complex expression to test whether the values inserted are value. 
		For example, you can check that values are positive, or greater than a specific size, or start with a certain prefix, etc. 

-> FOREIGN KEY 
	This is a consistency check which ensures that each value in this column corresponds to another value in a column in another table.
		For example, if there are two tables, one listing all Employees by ID, and another listing their payroll information: 
			the `FOREIGN KEY` can ensure that each row in the payroll table corresponds to a valid employee in the master Employee list. 



CREATE TABLE movies (id INTEGER PRIMARY KEY, title TEXT, director TEXT, year INTEGER, length_minutes INTEGER);

CREATE TABLE Database (Name text, Version float, Download_count integer);


			ALTER TABLE mytable ADD column DataType OptionalTableConstraint DEFAULT default_value;
			ALTER TABLE mytable DROP column_to_be_deleted;
			ALTER TABLE mytable RENAME TO fresh_table_name;

ALTER TABLE movies ADD Aspect_ratio FLOAT;
ALTER TABLE movies ADD Language TEXT DEFAULT English;

			DROP TABLE IF EXISTS mytable;

DROP TABLE IF EXISTS Boxoffice;


._________________________________________________________________________________________________________________________________________________.
||||'':/:''||||'':/:''||||'':/:''||||'':/:''||||'':/:''||||'':/:''||||'':/:''||||'':/:''||||'':/:''||||'':/:''||||'':/:''||||'':/:''||||'':/:''||||
|-------------------------------------------------------------------------------------------------------------------------------------------------|
|.===============================================================================================================================================.|
|\-----------------------------------------------------------------------------------------------------------------------------------------------/|
| |																		 ||
| |	SELECT AVG(revenue_generated) FROM note_builds;												 ||
| |																		 ||
| |		SELECT * FROM note_builds WHERE res > (SELECT AVG(revenue_do) FROM note_builds);						 ||
| |     SELECT*FROM employees WHERE res > (SELECT AVG(revenue_do) FROM employees AS dep_empl WHERE dep_empl.department = employees.department);  ||
|_\																	        /_|
\\_\___________________________________________________________________________________________________________________________________________/_//
 \_______________________________________________________________________________________________________________________________________________/


/\^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^/\
\|	SELECT *, ... FROM mytable WHERE column IN/NOT IN (SELECT another_column FROM another_table);						   |/
|]																		   [|
[| SELECT "column, ""column FROM #table UNION / UNION ALL / INTERSECT / EXCEPT SELECT ^column, ^^column FROM ##table ORDER BY column DESC LIMIT @; |]
/|																	           |\
\_^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^_/
